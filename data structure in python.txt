oops-object oriented programming structures

1.class variables can be accesed inside the method using keyword "SELF".
2.instances variable can be accessed outside the class using "objname .variable name"
3.variables inside the method are having local scope we cannot acsess the outside the class

PROGRAM:
    class happy:
    a=int(input(""))
    def method(self):
        b=12
        print(self.a)
        print(b)
obj=happy()
print(obj.a)
obj.method()

encapsulation:
it gives a data security.
1.public
2.private
3.protected

#protected:"_"-(1 underscore)
PROGRAM:
class encap:
    _a=10
    c=20
    def encapfunction(self):
        b=200
        print("the encapsulation")
        print(self._a+50)

obj=encap()
print(obj._a)
obj.encapfunction()
print(obj.c)

#private:"__"-(2 underscores)
PROGRAM:
class encap:
    __a=10
    c=20
    def encapsulation(self):
        b=200
        print("private encapsulation:")
        print(self.__a+20)

obj=encap()

obj.encapsulation()
print(obj.__a)

DATA STRUCTURE:
	inorder tp structurise the data to keep it efficient in terns of 
	memory usage extractive information is called data structure.

data structure two types:linear and non linear

LINEAR:"static and dynamic"
	.static : array
	.dynamic: list stack queue

NON-LINEAR: graph and tree.

*static is fixed size.
*dynamic is not having fixed size.


LINKED LIST:
	list of data or items will be linked with oneanother is called as linkedlist.
ex:spotify,multiple urls.

SINGLE-LINKEDLIST

1.insertion:
	interting new node in the beginning 
	inserting new node at end
	insterting new node at gven postion 

STEPS:
1.create new node which u want to insert
2.make the new node point to current head node 
3.make ur new node as head node


#DELETING A NODE:

#head node:
def delete(self):
	temp=self.head
	self.head=temp.next
	temp.next=NOne

#tailnode:
def delete(self):
	temp=head.self.next
	prev=self.head
	while temp.next is not None:
		temp=temp.next
		prev=prev.next
	prev.next=None

#deleting position:
def delete_position(self,pos):
        temp=self.head.next
        prev=self.head
        for i in range(1,pos-1):
            temp=temp.next
            prev=prev.next
        prev.next=temp.next
        temp.next=None



double linkedlist insert in the beginnning
STEPS-
1.create a node with 3segments.
2.(new.next=head)
3.(head.prev=new)
4.(new.prev=null)
5.(head=newnode)

double linked list delete first node:
	1.temp=self.head
	2.temp.next=prev
	3.temp.next=Null
	4.self.head=temp.next
	5.temp.head=null


STACK:
Can be implemented in 3ways,
	1.using list.
	2.using linkedlist.
	3.using module called queue.

OPERATIONS IN STACK:
	1.push.
	2.pop.
	3.peek or top.
	4.empty or full.

STACK IMPPLEMENTSTION USING LINKEDLIST:
	1.push is inserting node at beginning. 
	2.pop is removing the head node.

TYPES OR QUEUES:
	1.circular queue
	2priority queue
2.PRIORITY QUEUE:
	Though elements are in queue, as per the priority given toe the elements 
	will get privelage to pop from the queue.
1.CIRCULAR QUQUE:
	empty spaces in the queue can be utilized once the queue is 
	full still want to add elements in a circular way.